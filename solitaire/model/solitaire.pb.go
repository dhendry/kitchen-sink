// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model/solitaire.proto

/*
Package model is a generated protocol buffer package.

It is generated from these files:
	model/solitaire.proto

It has these top-level messages:
	Card
	Pile
	GameState
	Move
*/
package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Ordering here is based on the "bridge standard" which uses ascending alphabetical ordering.
// Not that it really matters...
// https://en.wikipedia.org/wiki/Suit_(cards)#Ranking_of_suits
type Suit int32

const (
	Suit_NO_SUIT  Suit = 0
	Suit_CLUBS    Suit = 1
	Suit_DIAMONDS Suit = 2
	Suit_HEARTS   Suit = 3
	Suit_SPADES   Suit = 4
)

var Suit_name = map[int32]string{
	0: "NO_SUIT",
	1: "CLUBS",
	2: "DIAMONDS",
	3: "HEARTS",
	4: "SPADES",
}
var Suit_value = map[string]int32{
	"NO_SUIT":  0,
	"CLUBS":    1,
	"DIAMONDS": 2,
	"HEARTS":   3,
	"SPADES":   4,
}

func (x Suit) String() string {
	return proto.EnumName(Suit_name, int32(x))
}
func (Suit) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Rank int32

const (
	Rank_NO_RANK Rank = 0
	Rank_ACE     Rank = 1
	Rank_TWO     Rank = 2
	Rank_THREE   Rank = 3
	Rank_FOUR    Rank = 4
	Rank_FIVE    Rank = 5
	Rank_SIX     Rank = 6
	Rank_SEVEN   Rank = 7
	Rank_EIGHT   Rank = 8
	Rank_NINE    Rank = 9
	Rank_TEN     Rank = 10
	Rank_JACK    Rank = 11
	Rank_QUEEN   Rank = 12
	Rank_KING    Rank = 13
)

var Rank_name = map[int32]string{
	0:  "NO_RANK",
	1:  "ACE",
	2:  "TWO",
	3:  "THREE",
	4:  "FOUR",
	5:  "FIVE",
	6:  "SIX",
	7:  "SEVEN",
	8:  "EIGHT",
	9:  "NINE",
	10: "TEN",
	11: "JACK",
	12: "QUEEN",
	13: "KING",
}
var Rank_value = map[string]int32{
	"NO_RANK": 0,
	"ACE":     1,
	"TWO":     2,
	"THREE":   3,
	"FOUR":    4,
	"FIVE":    5,
	"SIX":     6,
	"SEVEN":   7,
	"EIGHT":   8,
	"NINE":    9,
	"TEN":     10,
	"JACK":    11,
	"QUEEN":   12,
	"KING":    13,
}

func (x Rank) String() string {
	return proto.EnumName(Rank_name, int32(x))
}
func (Rank) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type PileType int32

const (
	PileType_NO_PILE PileType = 0
	// The main deck
	// Cards are always face down in this pile
	PileType_DECK PileType = 1
	// Turn cards over from the deck to the waste pile to cycle through the deck.
	// If there are cards in this pile, at least the top card should be visible
	PileType_WASTE        PileType = 2
	PileType_TABLEAU_0    PileType = 10
	PileType_TABLEAU_1    PileType = 11
	PileType_TABLEAU_2    PileType = 12
	PileType_TABLEAU_3    PileType = 13
	PileType_TABLEAU_4    PileType = 14
	PileType_TABLEAU_5    PileType = 15
	PileType_TABLEAU_6    PileType = 16
	PileType_FOUNDATION_0 PileType = 20
	PileType_FOUNDATION_1 PileType = 21
	PileType_FOUNDATION_2 PileType = 22
	PileType_FOUNDATION_3 PileType = 23
)

var PileType_name = map[int32]string{
	0:  "NO_PILE",
	1:  "DECK",
	2:  "WASTE",
	10: "TABLEAU_0",
	11: "TABLEAU_1",
	12: "TABLEAU_2",
	13: "TABLEAU_3",
	14: "TABLEAU_4",
	15: "TABLEAU_5",
	16: "TABLEAU_6",
	20: "FOUNDATION_0",
	21: "FOUNDATION_1",
	22: "FOUNDATION_2",
	23: "FOUNDATION_3",
}
var PileType_value = map[string]int32{
	"NO_PILE":      0,
	"DECK":         1,
	"WASTE":        2,
	"TABLEAU_0":    10,
	"TABLEAU_1":    11,
	"TABLEAU_2":    12,
	"TABLEAU_3":    13,
	"TABLEAU_4":    14,
	"TABLEAU_5":    15,
	"TABLEAU_6":    16,
	"FOUNDATION_0": 20,
	"FOUNDATION_1": 21,
	"FOUNDATION_2": 22,
	"FOUNDATION_3": 23,
}

func (x PileType) String() string {
	return proto.EnumName(PileType_name, int32(x))
}
func (PileType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Card struct {
	Rank Rank `protobuf:"varint,1,opt,name=rank,enum=kitchensink.solitaire.model.Rank" json:"rank,omitempty"`
	Suit Suit `protobuf:"varint,2,opt,name=suit,enum=kitchensink.solitaire.model.Suit" json:"suit,omitempty"`
	// False means face down obviously
	FaceUp bool `protobuf:"varint,3,opt,name=face_up,json=faceUp" json:"face_up,omitempty"`
}

func (m *Card) Reset()                    { *m = Card{} }
func (m *Card) String() string            { return proto.CompactTextString(m) }
func (*Card) ProtoMessage()               {}
func (*Card) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Card) GetRank() Rank {
	if m != nil {
		return m.Rank
	}
	return Rank_NO_RANK
}

func (m *Card) GetSuit() Suit {
	if m != nil {
		return m.Suit
	}
	return Suit_NO_SUIT
}

func (m *Card) GetFaceUp() bool {
	if m != nil {
		return m.FaceUp
	}
	return false
}

type Pile struct {
	// NO_PILE is invalid
	PileType PileType `protobuf:"varint,1,opt,name=pile_type,json=pileType,enum=kitchensink.solitaire.model.PileType" json:"pile_type,omitempty"`
	// Cards are order from the bottom of the pile to the top of the pile.
	// The card at index 0 is at the bottom, and the card that is at index len()-1 is at the top (ie: typically playable).
	Cards []*Card `protobuf:"bytes,2,rep,name=cards" json:"cards,omitempty"`
}

func (m *Pile) Reset()                    { *m = Pile{} }
func (m *Pile) String() string            { return proto.CompactTextString(m) }
func (*Pile) ProtoMessage()               {}
func (*Pile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Pile) GetPileType() PileType {
	if m != nil {
		return m.PileType
	}
	return PileType_NO_PILE
}

func (m *Pile) GetCards() []*Card {
	if m != nil {
		return m.Cards
	}
	return nil
}

type GameState struct {
	// Fixed for the duration of the game across all moves.
	GameId     *GameState_Id         `protobuf:"bytes,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	StateToken *GameState_StateToken `protobuf:"bytes,2,opt,name=state_token,json=stateToken" json:"state_token,omitempty"`
	// Only one pile of each type should be present. Piles SHOULD (but are not guaranteed) to be ordered by their
	// PileType tag.
	Piles []*Pile `protobuf:"bytes,10,rep,name=piles" json:"piles,omitempty"`
}

func (m *GameState) Reset()                    { *m = GameState{} }
func (m *GameState) String() string            { return proto.CompactTextString(m) }
func (*GameState) ProtoMessage()               {}
func (*GameState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GameState) GetGameId() *GameState_Id {
	if m != nil {
		return m.GameId
	}
	return nil
}

func (m *GameState) GetStateToken() *GameState_StateToken {
	if m != nil {
		return m.StateToken
	}
	return nil
}

func (m *GameState) GetPiles() []*Pile {
	if m != nil {
		return m.Piles
	}
	return nil
}

// Game IDs must be globally unique and used only once
type GameState_Id struct {
	Seed int64 `protobuf:"fixed64,1,opt,name=seed" json:"seed,omitempty"`
	// Note that this nonce only technically needs to be unique within the context of the seed, but should
	// obviously by cryptographically securely generated
	Nonce int64 `protobuf:"fixed64,2,opt,name=nonce" json:"nonce,omitempty"`
}

func (m *GameState_Id) Reset()                    { *m = GameState_Id{} }
func (m *GameState_Id) String() string            { return proto.CompactTextString(m) }
func (*GameState_Id) ProtoMessage()               {}
func (*GameState_Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *GameState_Id) GetSeed() int64 {
	if m != nil {
		return m.Seed
	}
	return 0
}

func (m *GameState_Id) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type GameState_StateToken struct {
	MoveNum int32 `protobuf:"varint,1,opt,name=move_num,json=moveNum" json:"move_num,omitempty"`
}

func (m *GameState_StateToken) Reset()                    { *m = GameState_StateToken{} }
func (m *GameState_StateToken) String() string            { return proto.CompactTextString(m) }
func (*GameState_StateToken) ProtoMessage()               {}
func (*GameState_StateToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 1} }

func (m *GameState_StateToken) GetMoveNum() int32 {
	if m != nil {
		return m.MoveNum
	}
	return 0
}

type Move struct {
	SrcPile  PileType `protobuf:"varint,1,opt,name=src_pile,json=srcPile,enum=kitchensink.solitaire.model.PileType" json:"src_pile,omitempty"`
	DestPile PileType `protobuf:"varint,2,opt,name=dest_pile,json=destPile,enum=kitchensink.solitaire.model.PileType" json:"dest_pile,omitempty"`
	// Number of cards counted from the "top" (largest index) to the bottom (least index) in the src deck
	NumCards int32 `protobuf:"varint,3,opt,name=num_cards,json=numCards" json:"num_cards,omitempty"`
}

func (m *Move) Reset()                    { *m = Move{} }
func (m *Move) String() string            { return proto.CompactTextString(m) }
func (*Move) ProtoMessage()               {}
func (*Move) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Move) GetSrcPile() PileType {
	if m != nil {
		return m.SrcPile
	}
	return PileType_NO_PILE
}

func (m *Move) GetDestPile() PileType {
	if m != nil {
		return m.DestPile
	}
	return PileType_NO_PILE
}

func (m *Move) GetNumCards() int32 {
	if m != nil {
		return m.NumCards
	}
	return 0
}

func init() {
	proto.RegisterType((*Card)(nil), "kitchensink.solitaire.model.Card")
	proto.RegisterType((*Pile)(nil), "kitchensink.solitaire.model.Pile")
	proto.RegisterType((*GameState)(nil), "kitchensink.solitaire.model.GameState")
	proto.RegisterType((*GameState_Id)(nil), "kitchensink.solitaire.model.GameState.Id")
	proto.RegisterType((*GameState_StateToken)(nil), "kitchensink.solitaire.model.GameState.StateToken")
	proto.RegisterType((*Move)(nil), "kitchensink.solitaire.model.Move")
	proto.RegisterEnum("kitchensink.solitaire.model.Suit", Suit_name, Suit_value)
	proto.RegisterEnum("kitchensink.solitaire.model.Rank", Rank_name, Rank_value)
	proto.RegisterEnum("kitchensink.solitaire.model.PileType", PileType_name, PileType_value)
}

func init() { proto.RegisterFile("model/solitaire.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 653 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x41, 0x53, 0xda, 0x60,
	0x10, 0x35, 0x21, 0x90, 0xb0, 0xa0, 0xdd, 0xf9, 0x46, 0x2b, 0xd5, 0x8b, 0x65, 0xa6, 0x53, 0xeb,
	0x81, 0x2a, 0xd6, 0xf6, 0xda, 0x00, 0x9f, 0x9a, 0xa2, 0xc1, 0x7e, 0x09, 0xda, 0xe9, 0x25, 0x93,
	0x92, 0xaf, 0x6d, 0x06, 0x92, 0x30, 0x24, 0x38, 0xe3, 0xb9, 0xe7, 0x1e, 0xfb, 0x23, 0xfa, 0x03,
	0xfa, 0x73, 0xfa, 0x5f, 0x3a, 0x1b, 0x50, 0x19, 0x0f, 0x56, 0x2f, 0xcc, 0xbe, 0xe5, 0xbd, 0xc7,
	0xdb, 0xdd, 0x10, 0x58, 0x8b, 0x92, 0x40, 0x8e, 0x5e, 0xa7, 0xc9, 0x28, 0xcc, 0xfc, 0x70, 0x22,
	0x1b, 0xe3, 0x49, 0x92, 0x25, 0x6c, 0x73, 0x18, 0x66, 0x83, 0xef, 0x32, 0x4e, 0xc3, 0x78, 0xd8,
	0xb8, 0xfd, 0x32, 0x27, 0xd7, 0x7f, 0x2a, 0xa0, 0xb5, 0xfd, 0x49, 0xc0, 0x0e, 0x40, 0x9b, 0xf8,
	0xf1, 0xb0, 0xa6, 0x6c, 0x29, 0xdb, 0x2b, 0xcd, 0xe7, 0x8d, 0x7b, 0x44, 0x0d, 0xe1, 0xc7, 0x43,
	0x91, 0xd3, 0x49, 0x96, 0x4e, 0xc3, 0xac, 0xa6, 0x3e, 0x40, 0xe6, 0x4c, 0xc3, 0x4c, 0xe4, 0x74,
	0xb6, 0x0e, 0xfa, 0x57, 0x7f, 0x20, 0xbd, 0xe9, 0xb8, 0x56, 0xd8, 0x52, 0xb6, 0x0d, 0x51, 0x22,
	0xd8, 0x1f, 0xd7, 0x7f, 0x28, 0xa0, 0x9d, 0x85, 0x23, 0xc9, 0x5a, 0x50, 0x1e, 0x87, 0x23, 0xe9,
	0x65, 0x57, 0x63, 0x39, 0x0f, 0xf5, 0xe2, 0x5e, 0x77, 0x52, 0xb9, 0x57, 0x63, 0x29, 0x8c, 0xf1,
	0xbc, 0x62, 0xef, 0xa0, 0x38, 0xf0, 0x27, 0x41, 0x5a, 0x53, 0xb7, 0x0a, 0xdb, 0x95, 0xff, 0xa4,
	0xa3, 0x2d, 0x88, 0x19, 0xbf, 0xfe, 0x47, 0x85, 0xf2, 0x91, 0x1f, 0x49, 0x27, 0xf3, 0x33, 0x8a,
	0xa2, 0x7f, 0xf3, 0x23, 0xe9, 0x85, 0x41, 0x1e, 0xa4, 0xd2, 0x7c, 0x75, 0xaf, 0xd1, 0x8d, 0xb0,
	0x61, 0x05, 0xa2, 0x44, 0x4a, 0x2b, 0x60, 0x02, 0x2a, 0x29, 0xf5, 0xbc, 0x2c, 0x19, 0xca, 0x38,
	0x5f, 0x57, 0xa5, 0xb9, 0xf7, 0x40, 0x9f, 0xfc, 0xd3, 0x25, 0xa1, 0x80, 0xf4, 0xa6, 0xa6, 0xf1,
	0x68, 0xd4, 0xb4, 0x06, 0x0f, 0x18, 0x8f, 0xd6, 0x23, 0x66, 0xfc, 0x8d, 0x06, 0xa8, 0x56, 0xc0,
	0x18, 0x68, 0xa9, 0x94, 0xb3, 0x99, 0x50, 0xe4, 0x35, 0x5b, 0x85, 0x62, 0x9c, 0xc4, 0x03, 0x99,
	0x07, 0x44, 0x31, 0x03, 0x1b, 0x2f, 0x01, 0x6e, 0x23, 0xb0, 0x67, 0x60, 0x44, 0xc9, 0xa5, 0xf4,
	0xe2, 0x69, 0x94, 0x6b, 0x8b, 0x42, 0x27, 0x6c, 0x4f, 0xa3, 0xfa, 0x6f, 0x05, 0xb4, 0xd3, 0xe4,
	0x52, 0xb2, 0xf7, 0x60, 0xa4, 0x93, 0x81, 0x47, 0x3f, 0xf7, 0xb8, 0xe3, 0xe9, 0xe9, 0x64, 0x70,
	0x7d, 0xff, 0x40, 0xa6, 0xd9, 0xcc, 0x42, 0x7d, 0xd4, 0xfd, 0x49, 0x97, 0x7b, 0x6c, 0x42, 0x39,
	0x9e, 0x46, 0xde, 0xec, 0x19, 0x28, 0xe4, 0x51, 0x8d, 0x78, 0x1a, 0xd1, 0xa5, 0xd3, 0x9d, 0x0e,
	0x68, 0xf4, 0x40, 0xb2, 0x0a, 0xe8, 0x76, 0xcf, 0x73, 0xfa, 0x96, 0x8b, 0x4b, 0xac, 0x0c, 0xc5,
	0xf6, 0x49, 0xbf, 0xe5, 0xa0, 0xc2, 0xaa, 0x60, 0x74, 0x2c, 0xf3, 0xb4, 0x67, 0x77, 0x1c, 0x54,
	0x19, 0x40, 0xe9, 0x98, 0x9b, 0xc2, 0x75, 0xb0, 0x40, 0xb5, 0x73, 0x66, 0x76, 0xb8, 0x83, 0xda,
	0xce, 0x2f, 0x05, 0x34, 0xfa, 0x3b, 0xcc, 0x6d, 0x84, 0x69, 0x77, 0x71, 0x89, 0xe9, 0x50, 0x30,
	0xdb, 0x1c, 0x15, 0x2a, 0xdc, 0x8b, 0x1e, 0xaa, 0x64, 0xec, 0x1e, 0x0b, 0xce, 0xb1, 0xc0, 0x0c,
	0xd0, 0x0e, 0x7b, 0x7d, 0x81, 0x5a, 0x5e, 0x59, 0xe7, 0x1c, 0x8b, 0xc4, 0x73, 0xac, 0x4f, 0x58,
	0x22, 0x9e, 0xc3, 0xcf, 0xb9, 0x8d, 0x3a, 0x95, 0xdc, 0x3a, 0x3a, 0x76, 0xd1, 0x20, 0xa2, 0x6d,
	0xd9, 0x1c, 0xcb, 0xb9, 0x21, 0xb7, 0x11, 0xa8, 0xf5, 0xc1, 0x6c, 0x77, 0xb1, 0x42, 0xbc, 0x8f,
	0x7d, 0xce, 0x6d, 0xac, 0x52, 0xb3, 0x6b, 0xd9, 0x47, 0xb8, 0xbc, 0xf3, 0x57, 0x01, 0xe3, 0x7a,
	0x23, 0xf3, 0x6c, 0x67, 0xd6, 0x09, 0xc7, 0x25, 0xe2, 0x74, 0x78, 0xbb, 0x8b, 0x0a, 0x09, 0x2f,
	0x4c, 0xc7, 0xe5, 0xa8, 0xb2, 0x65, 0x28, 0xbb, 0x66, 0xeb, 0x84, 0x9b, 0x7d, 0x6f, 0x17, 0x61,
	0x11, 0xee, 0x61, 0x65, 0x11, 0x36, 0xb1, 0xba, 0x08, 0xf7, 0x71, 0x79, 0x11, 0xbe, 0xc1, 0x95,
	0x45, 0x78, 0x80, 0x4f, 0x16, 0xe1, 0x5b, 0x44, 0x86, 0x50, 0x3d, 0xec, 0xf5, 0xed, 0x8e, 0xe9,
	0x5a, 0x3d, 0xdb, 0xdb, 0xc5, 0xd5, 0x3b, 0x9d, 0x3d, 0x5c, 0xbb, 0xd3, 0x69, 0xe2, 0xd3, 0x3b,
	0x9d, 0x7d, 0x5c, 0x6f, 0xe9, 0x9f, 0x8b, 0xf9, 0xd9, 0xbf, 0x94, 0xf2, 0x97, 0xdc, 0xfe, 0xbf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x44, 0x69, 0x4d, 0xc4, 0xfd, 0x04, 0x00, 0x00,
}
